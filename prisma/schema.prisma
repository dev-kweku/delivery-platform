// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Model
model User {
  id                    String             @id @default(cuid())
  name                  String?
  email                 String?            @unique
  emailVerified         DateTime?
  phone                 String?            @unique
  image                 String?
  role                  Role               @default(CUSTOMER)
  verified              Boolean            @default(false)
  averageRating         Float?
  commissionDiscount    Float              @default(0)
  isPremium             Boolean            @default(false)
  premiumExpiresAt      DateTime?
  verificationStatus    VerificationStatus @default(PENDING)
  idDocumentUrl         String?
  vehicleDocumentUrl    String?
  paystackRecipientCode String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts           Account[]
  sessions           Session[]
  deliveries         Delivery[]
  deliveriesAccepted Delivery[]         @relation("DeliveryAccepted")
  payments           Payment[]
  reviewsGiven       Review[]           @relation("ReviewGiven")
  reviewsReceived    Review[]           @relation("ReviewReceived")
  messages           Message[]
  notifications      Notification[]
  subscriptions      Subscription[]
  otps               OTP[]
  PushSubscription   PushSubscription[]
}

// OTP Model
model OTP {
  id        String   @id @default(cuid())
  phone     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User? @relation(fields: [phone], references: [phone], onDelete: Cascade)

  @@unique([phone, otp])
}

// Delivery Model
model Delivery {
  id              String         @id @default(cuid())
  customerId      String
  agentId         String?
  status          DeliveryStatus @default(PENDING)
  pickup          Json // { address, lat, lng }
  dropoff         Json // { address, lat, lng }
  itemDetails     Json // { description, weight, value }
  price           Float?
  distance        Float? // in km
  estimatedTime   Int? // in minutes
  isPromoted      Boolean        @default(false)
  promotionEndsAt DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deliveredAt     DateTime?
  acceptedAt      DateTime?

  customer User       @relation(fields: [customerId], references: [id])
  agent    User?      @relation("DeliveryAccepted", fields: [agentId], references: [id])
  payments Payment[]
  reviews  Review[]
  messages Message[]
  tracking Tracking[]
}

// Payment Model
model Payment {
  id               String        @id @default(cuid())
  deliveryId       String
  userId           String
  amount           Float
  reference        String        @unique
  status           PaymentStatus @default(PENDING)
  commissionAmount Float?
  netAmount        Float?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  delivery   Delivery    @relation(fields: [deliveryId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
  commission Commission?
}

// Commission Model
model Commission {
  id        String   @id @default(cuid())
  paymentId String   @unique @map("payment_id") // Required field
  amount    Float
  rate      Float // Commission rate (e.g., 0.15 for 15%)
  createdAt DateTime @default(now())

  payment Payment @relation(fields: [paymentId], references: [id])
}

// Review Model
model Review {
  id            String       @id @default(cuid())
  deliveryId    String
  reviewerId    String
  ratedUserId   String
  rating        Int // 1-5
  review        String?
  recipientType Role // CUSTOMER or AGENT
  status        ReviewStatus @default(ACTIVE)
  createdAt     DateTime     @default(now())

  delivery  Delivery @relation(fields: [deliveryId], references: [id])
  reviewer  User     @relation("ReviewGiven", fields: [reviewerId], references: [id])
  ratedUser User     @relation("ReviewReceived", fields: [ratedUserId], references: [id])

  @@unique([deliveryId, reviewerId])
}

// Message Model
model Message {
  id         String   @id @default(cuid())
  deliveryId String
  senderId   String
  content    String
  timestamp  DateTime @default(now())

  delivery Delivery @relation(fields: [deliveryId], references: [id])
  sender   User     @relation(fields: [senderId], references: [id])
}

// Notification Model
model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])
}

// Tracking Model
model Tracking {
  id         String   @id @default(cuid())
  deliveryId String
  lat        Float
  lng        Float
  timestamp  DateTime @default(now())

  delivery Delivery @relation(fields: [deliveryId], references: [id])
}

// Push Subscription Model
model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  p256dh    String
  auth      String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

// Subscription Model
model Subscription {
  id                 String             @id @default(cuid())
  userId             String
  plan               SubscriptionPlan
  amount             Float
  commissionDiscount Float
  nextBillingDate    DateTime
  status             SubscriptionStatus @default(ACTIVE)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// System Settings Model
model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enums
enum Role {
  CUSTOMER
  AGENT
  ADMIN
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  IN_TRANSIT
  DELIVERED
  CANCELLED
  PAID
}

enum PaymentStatus {
  PENDING
  COMPLETED
  RELEASED
  FAILED
  REFUNDED
}

enum ReviewStatus {
  ACTIVE
  FLAGGED
  REMOVED
}

enum NotificationType {
  DELIVERY_UPDATE
  PAYMENT_RECEIVED
  RATING_RECEIVED
  AGENT_VERIFICATION
  SYSTEM
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}
